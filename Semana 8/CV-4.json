{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "80a89cfa",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import datetime\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import r2_score\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.metrics import mean_absolute_error\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn import preprocessing \n",
    "import matplotlib.pyplot as plt\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23ee6402",
   "metadata": {},
   "source": [
    "## Creando dataframes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6824a65e",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_df = pd.read_excel('CV4.xlsx', sheet_name=[\"cellphones data\",\"cellphones ratings\",\"cellphones users\"])\n",
    "cellphone_data_df = data_df[\"cellphones data\"]\n",
    "user_data_df = data_df[\"cellphones users\"]\n",
    "ratings_data_df = data_df[\"cellphones ratings\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8f27f8a9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cellphone_id</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>699</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>699</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>1199</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cellphone_id  price\n",
       "0             0    429\n",
       "1             1    699\n",
       "2             2    699\n",
       "3             3    999\n",
       "4             4   1199"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cellphone_data_df = cellphone_data_df[[\"cellphone_id\", \"price\"]]\n",
    "cellphone_data_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "40daa69b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>38</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>40</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6</td>\n",
       "      <td>55</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8</td>\n",
       "      <td>25</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10</td>\n",
       "      <td>23</td>\n",
       "      <td>Male</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id  age  gender\n",
       "0        0   38  Female\n",
       "1        1   40  Female\n",
       "2        6   55  Female\n",
       "3        8   25  Female\n",
       "4       10   23    Male"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "user_data_df = user_data_df[[\"user_id\",\"age\",\"gender\"]]\n",
    "user_data_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "79513600",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>cellphone_id</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>23</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id  cellphone_id  rating\n",
       "0        0            30       1\n",
       "1        0             5       3\n",
       "2        0            10       9\n",
       "3        0             9       3\n",
       "4        0            23       2"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ratings_data_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a917d42",
   "metadata": {},
   "source": [
    "### Acá juntamos toda la información que necesitamos en un archivo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1eab053a",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_merge_df = ratings_data_df.merge(right=cellphone_data_df, how=\"inner\", on=\"cellphone_id\")\n",
    "data_merge_df = data_merge_df.merge(right=user_data_df, how=\"inner\", on=\"user_id\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f212961c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>cellphone_id</th>\n",
       "      <th>rating</th>\n",
       "      <th>price</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "      <td>159</td>\n",
       "      <td>38</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>236</td>\n",
       "      <td>38</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>9</td>\n",
       "      <td>528</td>\n",
       "      <td>38</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>312</td>\n",
       "      <td>38</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>23</td>\n",
       "      <td>2</td>\n",
       "      <td>872</td>\n",
       "      <td>38</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>199</td>\n",
       "      <td>38</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0</td>\n",
       "      <td>22</td>\n",
       "      <td>1</td>\n",
       "      <td>987</td>\n",
       "      <td>38</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>2</td>\n",
       "      <td>449</td>\n",
       "      <td>38</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0</td>\n",
       "      <td>19</td>\n",
       "      <td>1</td>\n",
       "      <td>379</td>\n",
       "      <td>38</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>10</td>\n",
       "      <td>999</td>\n",
       "      <td>38</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>16</td>\n",
       "      <td>30</td>\n",
       "      <td>2</td>\n",
       "      <td>159</td>\n",
       "      <td>31</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>16</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "      <td>312</td>\n",
       "      <td>31</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>16</td>\n",
       "      <td>15</td>\n",
       "      <td>10</td>\n",
       "      <td>499</td>\n",
       "      <td>31</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>16</td>\n",
       "      <td>13</td>\n",
       "      <td>7</td>\n",
       "      <td>899</td>\n",
       "      <td>31</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>16</td>\n",
       "      <td>27</td>\n",
       "      <td>4</td>\n",
       "      <td>428</td>\n",
       "      <td>31</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>429</td>\n",
       "      <td>31</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>16</td>\n",
       "      <td>11</td>\n",
       "      <td>8</td>\n",
       "      <td>899</td>\n",
       "      <td>31</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>16</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>599</td>\n",
       "      <td>31</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>16</td>\n",
       "      <td>24</td>\n",
       "      <td>3</td>\n",
       "      <td>174</td>\n",
       "      <td>31</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>16</td>\n",
       "      <td>26</td>\n",
       "      <td>5</td>\n",
       "      <td>618</td>\n",
       "      <td>31</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>25</td>\n",
       "      <td>30</td>\n",
       "      <td>5</td>\n",
       "      <td>159</td>\n",
       "      <td>27</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>25</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>236</td>\n",
       "      <td>27</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>25</td>\n",
       "      <td>8</td>\n",
       "      <td>10</td>\n",
       "      <td>199</td>\n",
       "      <td>27</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>25</td>\n",
       "      <td>16</td>\n",
       "      <td>9</td>\n",
       "      <td>449</td>\n",
       "      <td>27</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>25</td>\n",
       "      <td>32</td>\n",
       "      <td>9</td>\n",
       "      <td>189</td>\n",
       "      <td>27</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>25</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>899</td>\n",
       "      <td>27</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>25</td>\n",
       "      <td>20</td>\n",
       "      <td>5</td>\n",
       "      <td>780</td>\n",
       "      <td>27</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>25</td>\n",
       "      <td>14</td>\n",
       "      <td>2</td>\n",
       "      <td>1799</td>\n",
       "      <td>27</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>25</td>\n",
       "      <td>12</td>\n",
       "      <td>3</td>\n",
       "      <td>840</td>\n",
       "      <td>27</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>25</td>\n",
       "      <td>2</td>\n",
       "      <td>9</td>\n",
       "      <td>699</td>\n",
       "      <td>27</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>32</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "      <td>159</td>\n",
       "      <td>39</td>\n",
       "      <td>Male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>32</td>\n",
       "      <td>10</td>\n",
       "      <td>8</td>\n",
       "      <td>528</td>\n",
       "      <td>39</td>\n",
       "      <td>Male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>32</td>\n",
       "      <td>31</td>\n",
       "      <td>3</td>\n",
       "      <td>129</td>\n",
       "      <td>39</td>\n",
       "      <td>Male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>32</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>899</td>\n",
       "      <td>39</td>\n",
       "      <td>Male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>32</td>\n",
       "      <td>20</td>\n",
       "      <td>2</td>\n",
       "      <td>780</td>\n",
       "      <td>39</td>\n",
       "      <td>Male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>32</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>899</td>\n",
       "      <td>39</td>\n",
       "      <td>Male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>32</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>599</td>\n",
       "      <td>39</td>\n",
       "      <td>Male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>32</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>840</td>\n",
       "      <td>39</td>\n",
       "      <td>Male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>32</td>\n",
       "      <td>26</td>\n",
       "      <td>9</td>\n",
       "      <td>618</td>\n",
       "      <td>39</td>\n",
       "      <td>Male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>32</td>\n",
       "      <td>2</td>\n",
       "      <td>9</td>\n",
       "      <td>699</td>\n",
       "      <td>39</td>\n",
       "      <td>Male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>33</td>\n",
       "      <td>30</td>\n",
       "      <td>10</td>\n",
       "      <td>159</td>\n",
       "      <td>30</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>33</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>528</td>\n",
       "      <td>30</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>33</td>\n",
       "      <td>9</td>\n",
       "      <td>10</td>\n",
       "      <td>312</td>\n",
       "      <td>30</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>33</td>\n",
       "      <td>19</td>\n",
       "      <td>10</td>\n",
       "      <td>379</td>\n",
       "      <td>30</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>33</td>\n",
       "      <td>32</td>\n",
       "      <td>8</td>\n",
       "      <td>189</td>\n",
       "      <td>30</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>33</td>\n",
       "      <td>13</td>\n",
       "      <td>8</td>\n",
       "      <td>899</td>\n",
       "      <td>30</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>33</td>\n",
       "      <td>29</td>\n",
       "      <td>9</td>\n",
       "      <td>500</td>\n",
       "      <td>30</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>33</td>\n",
       "      <td>25</td>\n",
       "      <td>10</td>\n",
       "      <td>435</td>\n",
       "      <td>30</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>33</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>599</td>\n",
       "      <td>30</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>33</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>699</td>\n",
       "      <td>30</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>37</td>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "      <td>159</td>\n",
       "      <td>34</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>37</td>\n",
       "      <td>23</td>\n",
       "      <td>9</td>\n",
       "      <td>872</td>\n",
       "      <td>34</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>37</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>154</td>\n",
       "      <td>34</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>37</td>\n",
       "      <td>31</td>\n",
       "      <td>2</td>\n",
       "      <td>129</td>\n",
       "      <td>34</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>37</td>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "      <td>299</td>\n",
       "      <td>34</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>37</td>\n",
       "      <td>32</td>\n",
       "      <td>5</td>\n",
       "      <td>189</td>\n",
       "      <td>34</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>37</td>\n",
       "      <td>28</td>\n",
       "      <td>10</td>\n",
       "      <td>1998</td>\n",
       "      <td>34</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>37</td>\n",
       "      <td>15</td>\n",
       "      <td>5</td>\n",
       "      <td>499</td>\n",
       "      <td>34</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>37</td>\n",
       "      <td>13</td>\n",
       "      <td>5</td>\n",
       "      <td>899</td>\n",
       "      <td>34</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>37</td>\n",
       "      <td>24</td>\n",
       "      <td>6</td>\n",
       "      <td>174</td>\n",
       "      <td>34</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    user_id  cellphone_id  rating  price  age  gender\n",
       "0         0            30       1    159   38  Female\n",
       "1         0             5       3    236   38  Female\n",
       "2         0            10       9    528   38  Female\n",
       "3         0             9       3    312   38  Female\n",
       "4         0            23       2    872   38  Female\n",
       "5         0             8       2    199   38  Female\n",
       "6         0            22       1    987   38  Female\n",
       "7         0            16       2    449   38  Female\n",
       "8         0            19       1    379   38  Female\n",
       "9         0             3      10    999   38  Female\n",
       "10       16            30       2    159   31  Female\n",
       "11       16             9       6    312   31  Female\n",
       "12       16            15      10    499   31  Female\n",
       "13       16            13       7    899   31  Female\n",
       "14       16            27       4    428   31  Female\n",
       "15       16             0       1    429   31  Female\n",
       "16       16            11       8    899   31  Female\n",
       "17       16             6       2    599   31  Female\n",
       "18       16            24       3    174   31  Female\n",
       "19       16            26       5    618   31  Female\n",
       "20       25            30       5    159   27  Female\n",
       "21       25             5       6    236   27  Female\n",
       "22       25             8      10    199   27  Female\n",
       "23       25            16       9    449   27  Female\n",
       "24       25            32       9    189   27  Female\n",
       "25       25            13       1    899   27  Female\n",
       "26       25            20       5    780   27  Female\n",
       "27       25            14       2   1799   27  Female\n",
       "28       25            12       3    840   27  Female\n",
       "29       25             2       9    699   27  Female\n",
       "30       32            30       1    159   39    Male\n",
       "31       32            10       8    528   39    Male\n",
       "32       32            31       3    129   39    Male\n",
       "33       32            13       1    899   39    Male\n",
       "34       32            20       2    780   39    Male\n",
       "35       32            11       1    899   39    Male\n",
       "36       32             6       2    599   39    Male\n",
       "37       32            12       1    840   39    Male\n",
       "38       32            26       9    618   39    Male\n",
       "39       32             2       9    699   39    Male\n",
       "40       33            30      10    159   30  Female\n",
       "41       33            10      10    528   30  Female\n",
       "42       33             9      10    312   30  Female\n",
       "43       33            19      10    379   30  Female\n",
       "44       33            32       8    189   30  Female\n",
       "45       33            13       8    899   30  Female\n",
       "46       33            29       9    500   30  Female\n",
       "47       33            25      10    435   30  Female\n",
       "48       33             6       8    599   30  Female\n",
       "49       33             2      10    699   30  Female\n",
       "50       37            30       1    159   34  Female\n",
       "51       37            23       9    872   34  Female\n",
       "52       37             7       1    154   34  Female\n",
       "53       37            31       2    129   34  Female\n",
       "54       37            18       5    299   34  Female\n",
       "55       37            32       5    189   34  Female\n",
       "56       37            28      10   1998   34  Female\n",
       "57       37            15       5    499   34  Female\n",
       "58       37            13       5    899   34  Female\n",
       "59       37            24       6    174   34  Female"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_merge_df.head(60)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ba92a64",
   "metadata": {},
   "source": [
    "Seleccionaremos las siguientes columnas para estudiar el rating en función de la edad, género y precio promedio del teléfono"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e6a8a04a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "user_id         0\n",
       "cellphone_id    0\n",
       "rating          0\n",
       "price           0\n",
       "age             0\n",
       "gender          0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_merge_df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "80da4094",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>price</th>\n",
       "      <th>gender</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>38</td>\n",
       "      <td>159</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>38</td>\n",
       "      <td>236</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>38</td>\n",
       "      <td>528</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>38</td>\n",
       "      <td>312</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>38</td>\n",
       "      <td>872</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>38</td>\n",
       "      <td>199</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>38</td>\n",
       "      <td>987</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>38</td>\n",
       "      <td>449</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>38</td>\n",
       "      <td>379</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>38</td>\n",
       "      <td>999</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>31</td>\n",
       "      <td>159</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>31</td>\n",
       "      <td>312</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>31</td>\n",
       "      <td>499</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>31</td>\n",
       "      <td>899</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>31</td>\n",
       "      <td>428</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>31</td>\n",
       "      <td>429</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>31</td>\n",
       "      <td>899</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>31</td>\n",
       "      <td>599</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>31</td>\n",
       "      <td>174</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>31</td>\n",
       "      <td>618</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>27</td>\n",
       "      <td>159</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>27</td>\n",
       "      <td>236</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>27</td>\n",
       "      <td>199</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>27</td>\n",
       "      <td>449</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>27</td>\n",
       "      <td>189</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>27</td>\n",
       "      <td>899</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>27</td>\n",
       "      <td>780</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>27</td>\n",
       "      <td>1799</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>27</td>\n",
       "      <td>840</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>27</td>\n",
       "      <td>699</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>39</td>\n",
       "      <td>159</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>39</td>\n",
       "      <td>528</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>39</td>\n",
       "      <td>129</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>39</td>\n",
       "      <td>899</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>39</td>\n",
       "      <td>780</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>39</td>\n",
       "      <td>899</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>39</td>\n",
       "      <td>599</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>39</td>\n",
       "      <td>840</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>39</td>\n",
       "      <td>618</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>39</td>\n",
       "      <td>699</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>30</td>\n",
       "      <td>159</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>30</td>\n",
       "      <td>528</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>30</td>\n",
       "      <td>312</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>30</td>\n",
       "      <td>379</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>30</td>\n",
       "      <td>189</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>30</td>\n",
       "      <td>899</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>30</td>\n",
       "      <td>500</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>30</td>\n",
       "      <td>435</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>30</td>\n",
       "      <td>599</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>30</td>\n",
       "      <td>699</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    age  price  gender  rating\n",
       "0    38    159       1       1\n",
       "1    38    236       1       3\n",
       "2    38    528       1       9\n",
       "3    38    312       1       3\n",
       "4    38    872       1       2\n",
       "5    38    199       1       2\n",
       "6    38    987       1       1\n",
       "7    38    449       1       2\n",
       "8    38    379       1       1\n",
       "9    38    999       1      10\n",
       "10   31    159       1       2\n",
       "11   31    312       1       6\n",
       "12   31    499       1      10\n",
       "13   31    899       1       7\n",
       "14   31    428       1       4\n",
       "15   31    429       1       1\n",
       "16   31    899       1       8\n",
       "17   31    599       1       2\n",
       "18   31    174       1       3\n",
       "19   31    618       1       5\n",
       "20   27    159       1       5\n",
       "21   27    236       1       6\n",
       "22   27    199       1      10\n",
       "23   27    449       1       9\n",
       "24   27    189       1       9\n",
       "25   27    899       1       1\n",
       "26   27    780       1       5\n",
       "27   27   1799       1       2\n",
       "28   27    840       1       3\n",
       "29   27    699       1       9\n",
       "30   39    159       0       1\n",
       "31   39    528       0       8\n",
       "32   39    129       0       3\n",
       "33   39    899       0       1\n",
       "34   39    780       0       2\n",
       "35   39    899       0       1\n",
       "36   39    599       0       2\n",
       "37   39    840       0       1\n",
       "38   39    618       0       9\n",
       "39   39    699       0       9\n",
       "40   30    159       1      10\n",
       "41   30    528       1      10\n",
       "42   30    312       1      10\n",
       "43   30    379       1      10\n",
       "44   30    189       1       8\n",
       "45   30    899       1       8\n",
       "46   30    500       1       9\n",
       "47   30    435       1      10\n",
       "48   30    599       1       8\n",
       "49   30    699       1      10"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_merge_df2 = data_merge_df.copy()\n",
    "data_merge_df2[\"gender\"] = data_merge_df2[\"gender\"].apply(lambda x: 0 if (x == \"Male\") else 1)\n",
    "data_merge_df2 = data_merge_df2[[\"age\",\"price\",\"gender\",\"rating\"]]\n",
    "data_merge_df2.head(50)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "53671d49",
   "metadata": {},
   "source": [
    "Se normalizan los datos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "2925cce6",
   "metadata": {},
   "outputs": [],
   "source": [
    "min_max_scaler = preprocessing.MinMaxScaler()\n",
    "df_escalado = min_max_scaler.fit_transform(data_merge_df2)\n",
    "df_escalado = pd.DataFrame(df_escalado)\n",
    "df_escalado = df_escalado.rename(columns = {0: 'age', 1:'price',2:'gender',3:\"rating\"}) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "4ece4a5a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>price</th>\n",
       "      <th>gender</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.425</td>\n",
       "      <td>0.016051</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.425</td>\n",
       "      <td>0.057250</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.117647</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.425</td>\n",
       "      <td>0.213483</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.470588</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.425</td>\n",
       "      <td>0.097913</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.117647</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.425</td>\n",
       "      <td>0.397539</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.058824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.425</td>\n",
       "      <td>0.037453</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.058824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.425</td>\n",
       "      <td>0.459069</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.425</td>\n",
       "      <td>0.171215</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.058824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.425</td>\n",
       "      <td>0.133761</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.425</td>\n",
       "      <td>0.465490</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.529412</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.250</td>\n",
       "      <td>0.016051</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.058824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>0.250</td>\n",
       "      <td>0.097913</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.294118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>0.250</td>\n",
       "      <td>0.197967</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.529412</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>0.250</td>\n",
       "      <td>0.411985</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.352941</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>0.250</td>\n",
       "      <td>0.159979</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.176471</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>0.250</td>\n",
       "      <td>0.160514</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>0.250</td>\n",
       "      <td>0.411985</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.411765</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>0.250</td>\n",
       "      <td>0.251471</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.058824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>0.250</td>\n",
       "      <td>0.024077</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.117647</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>0.250</td>\n",
       "      <td>0.261637</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.235294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>0.150</td>\n",
       "      <td>0.016051</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.235294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>0.150</td>\n",
       "      <td>0.057250</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.294118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>0.150</td>\n",
       "      <td>0.037453</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.529412</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>0.150</td>\n",
       "      <td>0.171215</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.470588</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>0.150</td>\n",
       "      <td>0.032103</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.470588</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>0.150</td>\n",
       "      <td>0.411985</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>0.150</td>\n",
       "      <td>0.348315</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.235294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>0.150</td>\n",
       "      <td>0.893526</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.058824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>0.150</td>\n",
       "      <td>0.380417</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.117647</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>0.150</td>\n",
       "      <td>0.304976</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.470588</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>0.450</td>\n",
       "      <td>0.016051</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>0.450</td>\n",
       "      <td>0.213483</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.411765</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>0.450</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.117647</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>0.450</td>\n",
       "      <td>0.411985</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>0.450</td>\n",
       "      <td>0.348315</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.058824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>0.450</td>\n",
       "      <td>0.411985</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>0.450</td>\n",
       "      <td>0.251471</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.058824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>0.450</td>\n",
       "      <td>0.380417</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>0.450</td>\n",
       "      <td>0.261637</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.470588</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>0.450</td>\n",
       "      <td>0.304976</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.470588</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      age     price  gender    rating\n",
       "0   0.425  0.016051     1.0  0.000000\n",
       "1   0.425  0.057250     1.0  0.117647\n",
       "2   0.425  0.213483     1.0  0.470588\n",
       "3   0.425  0.097913     1.0  0.117647\n",
       "4   0.425  0.397539     1.0  0.058824\n",
       "5   0.425  0.037453     1.0  0.058824\n",
       "6   0.425  0.459069     1.0  0.000000\n",
       "7   0.425  0.171215     1.0  0.058824\n",
       "8   0.425  0.133761     1.0  0.000000\n",
       "9   0.425  0.465490     1.0  0.529412\n",
       "10  0.250  0.016051     1.0  0.058824\n",
       "11  0.250  0.097913     1.0  0.294118\n",
       "12  0.250  0.197967     1.0  0.529412\n",
       "13  0.250  0.411985     1.0  0.352941\n",
       "14  0.250  0.159979     1.0  0.176471\n",
       "15  0.250  0.160514     1.0  0.000000\n",
       "16  0.250  0.411985     1.0  0.411765\n",
       "17  0.250  0.251471     1.0  0.058824\n",
       "18  0.250  0.024077     1.0  0.117647\n",
       "19  0.250  0.261637     1.0  0.235294\n",
       "20  0.150  0.016051     1.0  0.235294\n",
       "21  0.150  0.057250     1.0  0.294118\n",
       "22  0.150  0.037453     1.0  0.529412\n",
       "23  0.150  0.171215     1.0  0.470588\n",
       "24  0.150  0.032103     1.0  0.470588\n",
       "25  0.150  0.411985     1.0  0.000000\n",
       "26  0.150  0.348315     1.0  0.235294\n",
       "27  0.150  0.893526     1.0  0.058824\n",
       "28  0.150  0.380417     1.0  0.117647\n",
       "29  0.150  0.304976     1.0  0.470588\n",
       "30  0.450  0.016051     0.0  0.000000\n",
       "31  0.450  0.213483     0.0  0.411765\n",
       "32  0.450  0.000000     0.0  0.117647\n",
       "33  0.450  0.411985     0.0  0.000000\n",
       "34  0.450  0.348315     0.0  0.058824\n",
       "35  0.450  0.411985     0.0  0.000000\n",
       "36  0.450  0.251471     0.0  0.058824\n",
       "37  0.450  0.380417     0.0  0.000000\n",
       "38  0.450  0.261637     0.0  0.470588\n",
       "39  0.450  0.304976     0.0  0.470588"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_escalado.head(40)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fdd36e3c",
   "metadata": {},
   "source": [
    "Representación gráfica de los datos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "6a488018",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x262c818fdc0>]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x1 = df_escalado['age'].values\n",
    "y1 = df_escalado['rating'].values\n",
    "plt.ylabel('Rating')\n",
    "plt.xlabel('Age')\n",
    "plt.title('Rating vs Age')\n",
    "plt.plot(x1,y1,'o',markersize=4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "aeeb8778",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x262ca252490>]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x1 = df_escalado['price'].values\n",
    "y1 = df_escalado['rating'].values\n",
    "plt.ylabel('Rating')\n",
    "plt.xlabel('Price')\n",
    "plt.title('Rating vs Price')\n",
    "plt.plot(x1,y1,'o',markersize=4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "1c0d15db",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x262ca2c34c0>]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x1 = df_escalado['gender'].values\n",
    "y1 = df_escalado['rating'].values\n",
    "plt.ylabel('Rating')\n",
    "plt.xlabel('Gender')\n",
    "plt.title('Rating vs Gender')\n",
    "plt.plot(x1,y1,'o',markersize=4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "93f2a7ae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>price</th>\n",
       "      <th>gender</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>38</td>\n",
       "      <td>159</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>38</td>\n",
       "      <td>236</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>38</td>\n",
       "      <td>528</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>38</td>\n",
       "      <td>312</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>38</td>\n",
       "      <td>872</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age  price  gender  rating\n",
       "0   38    159       1       1\n",
       "1   38    236       1       3\n",
       "2   38    528       1       9\n",
       "3   38    312       1       3\n",
       "4   38    872       1       2"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_merge_df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "94335124",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>price</th>\n",
       "      <th>gender</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.425</td>\n",
       "      <td>0.016051</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.425</td>\n",
       "      <td>0.057250</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.425</td>\n",
       "      <td>0.213483</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.425</td>\n",
       "      <td>0.097913</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.425</td>\n",
       "      <td>0.397539</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     age     price  gender\n",
       "0  0.425  0.016051     1.0\n",
       "1  0.425  0.057250     1.0\n",
       "2  0.425  0.213483     1.0\n",
       "3  0.425  0.097913     1.0\n",
       "4  0.425  0.397539     1.0"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "min_max_scaler = preprocessing.MinMaxScaler() \n",
    "df_escalado1 = min_max_scaler.fit_transform(data_merge_df2)\n",
    "df_escalado1 = pd.DataFrame(df_escalado1)\n",
    "df_escalado1 = df_escalado1.rename(columns = {0: 'age', 1:'price',2:'gender'}) \n",
    "df_escalado1 = df_escalado1[[\"age\",\"price\",\"gender\"]]\n",
    "df_escalado1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "c2ea28d7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>price</th>\n",
       "      <th>gender</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.425</td>\n",
       "      <td>0.016051</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.425</td>\n",
       "      <td>0.057250</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.425</td>\n",
       "      <td>0.213483</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.425</td>\n",
       "      <td>0.097913</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.425</td>\n",
       "      <td>0.397539</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     age     price  gender\n",
       "0  0.425  0.016051     1.0\n",
       "1  0.425  0.057250     1.0\n",
       "2  0.425  0.213483     1.0\n",
       "3  0.425  0.097913     1.0\n",
       "4  0.425  0.397539     1.0"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "nc = range(1, 10) \n",
    "kmeans = [KMeans(n_clusters=i) for i in nc]\n",
    "score = [kmeans[i].fit(df_escalado1).score(df_escalado1) for i in range(len(kmeans))]\n",
    "score\n",
    "plt.xlabel('Número de clústeres (k)')\n",
    "plt.ylabel('Suma de los errores cuadráticos')\n",
    "plt.plot(nc,score)\n",
    "df_escalado1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "c5df1f65",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>price</th>\n",
       "      <th>gender</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>38</td>\n",
       "      <td>159</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>38</td>\n",
       "      <td>236</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>38</td>\n",
       "      <td>528</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>38</td>\n",
       "      <td>312</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>38</td>\n",
       "      <td>872</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age  price  gender\n",
       "0   38    159       1\n",
       "1   38    236       1\n",
       "2   38    528       1\n",
       "3   38    312       1\n",
       "4   38    872       1"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_merge_df3 = data_merge_df2[[\"age\",\"price\",\"gender\"]].copy()\n",
    "data_merge_df3.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "f35151a6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.425</td>\n",
       "      <td>0.016051</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.425</td>\n",
       "      <td>0.057250</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.425</td>\n",
       "      <td>0.213483</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.425</td>\n",
       "      <td>0.097913</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.425</td>\n",
       "      <td>0.397539</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       0         1    2\n",
       "0  0.425  0.016051  1.0\n",
       "1  0.425  0.057250  1.0\n",
       "2  0.425  0.213483  1.0\n",
       "3  0.425  0.097913  1.0\n",
       "4  0.425  0.397539  1.0"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "min_max_scaler = preprocessing.MinMaxScaler() \n",
    "df_escalado1 = min_max_scaler.fit_transform(data_merge_df3)\n",
    "df_escalado1 = pd.DataFrame(df_escalado1)\n",
    "df_escalado1.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "10b388a8",
   "metadata": {},
   "source": [
    "La curva nos muestra que el k óptimo puede ser de 2 aprox"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "1c1e8942",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[4.08510638e-01, 2.49711417e-01, 1.00000000e+00],\n",
       "       [3.63461538e-01, 2.56782730e-01, 6.10622664e-16]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "kmeans = KMeans(n_clusters=2).fit(df_escalado1)\n",
    "centroids = kmeans.cluster_centers_\n",
    "centroids"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "5e0cd60d",
   "metadata": {},
   "outputs": [],
   "source": [
    "labels = kmeans.predict(df_escalado1)\n",
    "data_merge_df3[\"label\"] = labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "ab99a47a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>price</th>\n",
       "      <th>gender</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>38</td>\n",
       "      <td>159</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>38</td>\n",
       "      <td>236</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>38</td>\n",
       "      <td>528</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>38</td>\n",
       "      <td>312</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>38</td>\n",
       "      <td>872</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age  price  gender  label\n",
       "0   38    159       1      0\n",
       "1   38    236       1      0\n",
       "2   38    528       1      0\n",
       "3   38    312       1      0\n",
       "4   38    872       1      0"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_merge_df3.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "0349c120",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>price</th>\n",
       "      <th>gender</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.425</td>\n",
       "      <td>0.016051</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.425</td>\n",
       "      <td>0.057250</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.117647</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.425</td>\n",
       "      <td>0.213483</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.470588</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.425</td>\n",
       "      <td>0.097913</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.117647</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.425</td>\n",
       "      <td>0.397539</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.058824</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     age     price  gender    rating\n",
       "0  0.425  0.016051     1.0  0.000000\n",
       "1  0.425  0.057250     1.0  0.117647\n",
       "2  0.425  0.213483     1.0  0.470588\n",
       "3  0.425  0.097913     1.0  0.117647\n",
       "4  0.425  0.397539     1.0  0.058824"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_escalado.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "36769221",
   "metadata": {},
   "source": [
    "Representación gráfica del agrupamiento"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "44ad926f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "colores=['red','green']\n",
    "asignar=[]\n",
    "for row in labels:\n",
    "     asignar.append(colores[row])\n",
    "plt.rcParams[\"figure.figsize\"] = (12,7)\n",
    "\n",
    "plt.scatter(x1, y1, c=asignar, s=22)\n",
    "plt.scatter(centroids[:, 0], centroids[:, 1], marker='*', c=['red','green'], s=200) #Marcamos los centroides.\n",
    "plt.xlabel('gender')\n",
    "plt.ylabel('Rating')\n",
    "plt.title('Cellphone rating k-means clustering')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b71e1d42",
   "metadata": {},
   "source": [
    "## Ejemplo tridimensional"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "1e936992",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = df_escalado1[0].values\n",
    "y = df_escalado1[1].values\n",
    "z = df_escalado1[2].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "2a510c24",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = list(x)\n",
    "y = list(y)\n",
    "z = list(z)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc83f2df",
   "metadata": {},
   "source": [
    "La curva indica que 2 podría ser una cantidad adecuada de clústeres."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca258166",
   "metadata": {},
   "source": [
    "Representación gráfica del agrupamiento"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "1d720eb1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 864x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "colores=['red','green']\n",
    "asignar=[]\n",
    "\n",
    "for row in labels:\n",
    "     asignar.append(colores[row])\n",
    "ax = plt.axes(projection='3d')\n",
    "ax.scatter3D(x, y, z, c=asignar)\n",
    "ax.scatter3D(centroids[:, 0], centroids[:, 1],centroids[:, 2], marker = '*',c=['red','green'], \n",
    "            s=900)\n",
    "ax.set_xlabel(\"Age\")\n",
    "ax.set_ylabel(\"Price\")\n",
    "ax.set_zlabel(\"Gender\")\n",
    "plt.title('Cellphone Rating K-Means')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3a3c803",
   "metadata": {},
   "source": [
    "### Veamos ahora una regresión multivariada para predecir/entender el rating puesto por los encuestados"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "0537e4ba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>price</th>\n",
       "      <th>gender</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.425</td>\n",
       "      <td>0.016051</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.425</td>\n",
       "      <td>0.057250</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.117647</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.425</td>\n",
       "      <td>0.213483</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.470588</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.425</td>\n",
       "      <td>0.097913</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.117647</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.425</td>\n",
       "      <td>0.397539</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.058824</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     age     price  gender    rating\n",
       "0  0.425  0.016051     1.0  0.000000\n",
       "1  0.425  0.057250     1.0  0.117647\n",
       "2  0.425  0.213483     1.0  0.470588\n",
       "3  0.425  0.097913     1.0  0.117647\n",
       "4  0.425  0.397539     1.0  0.058824"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_escalado.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "163dd154",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>price</th>\n",
       "      <th>gender</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>38</td>\n",
       "      <td>159</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>38</td>\n",
       "      <td>236</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>38</td>\n",
       "      <td>528</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>38</td>\n",
       "      <td>312</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>38</td>\n",
       "      <td>872</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age  price  gender  rating\n",
       "0   38    159       1       1\n",
       "1   38    236       1       3\n",
       "2   38    528       1       9\n",
       "3   38    312       1       3\n",
       "4   38    872       1       2"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_merge_df2.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b1dfcb58",
   "metadata": {},
   "source": [
    "Dividimos el conjunto de datos en subconjunto de prueba (test) y un subconjunto de entrenamiento (train). Tomamos un 20% y un 80% respectivamente."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "4452f50a",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_merge_df2_train = data_merge_df2[:int(len(data_merge_df2)*0.8)]\n",
    "data_merge_df2_test = data_merge_df2[int(len(data_merge_df2)*0.8):]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "25b2564f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>price</th>\n",
       "      <th>gender</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>38</td>\n",
       "      <td>159</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>38</td>\n",
       "      <td>236</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>38</td>\n",
       "      <td>528</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>38</td>\n",
       "      <td>312</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>38</td>\n",
       "      <td>872</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age  price  gender  rating\n",
       "0   38    159       1       1\n",
       "1   38    236       1       3\n",
       "2   38    528       1       9\n",
       "3   38    312       1       3\n",
       "4   38    872       1       2"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_merge_df2_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "0e7b7fa2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>price</th>\n",
       "      <th>gender</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>792</th>\n",
       "      <td>25</td>\n",
       "      <td>1199</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>793</th>\n",
       "      <td>25</td>\n",
       "      <td>899</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>794</th>\n",
       "      <td>25</td>\n",
       "      <td>699</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>795</th>\n",
       "      <td>25</td>\n",
       "      <td>435</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>796</th>\n",
       "      <td>25</td>\n",
       "      <td>649</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     age  price  gender  rating\n",
       "792   25   1199       0      10\n",
       "793   25    899       0      10\n",
       "794   25    699       0      10\n",
       "795   25    435       0      10\n",
       "796   25    649       0      10"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_merge_df2_test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "e8979f83",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "990\n",
      "792\n",
      "198\n"
     ]
    }
   ],
   "source": [
    "print(len(data_merge_df2))\n",
    "print(len(data_merge_df2_train))\n",
    "print(len(data_merge_df2_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "641ca141",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mlr = LinearRegression()\n",
    "mlr.fit(data_merge_df2_train[[\"age\", \"price\", \"gender\"]], data_merge_df2_train[\"rating\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "4d7c03d7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6.1649719580976985\n",
      "[0.00104906 0.00059783 0.14727488]\n"
     ]
    }
   ],
   "source": [
    "print(mlr.intercept_)\n",
    "print(mlr.coef_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "e266d47f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>price</th>\n",
       "      <th>gender</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>792</th>\n",
       "      <td>25</td>\n",
       "      <td>1199</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>793</th>\n",
       "      <td>25</td>\n",
       "      <td>899</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>794</th>\n",
       "      <td>25</td>\n",
       "      <td>699</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>795</th>\n",
       "      <td>25</td>\n",
       "      <td>435</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>796</th>\n",
       "      <td>25</td>\n",
       "      <td>649</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     age  price  gender  rating\n",
       "792   25   1199       0      10\n",
       "793   25    899       0      10\n",
       "794   25    699       0      10\n",
       "795   25    435       0      10\n",
       "796   25    649       0      10"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_merge_df2_test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "a3a97650",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "792    7\n",
       "793    7\n",
       "794    7\n",
       "795    6\n",
       "796    7\n",
       "dtype: int64"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_prediction = data_merge_df2_test.apply(lambda row: int(np.round(mlr.intercept_ + row['age']*mlr.coef_[0] + row['price']*mlr.coef_[1] + row['gender']*mlr.coef_[2],0)),axis=1)\n",
    "df_prediction.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "313cc0f5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>price</th>\n",
       "      <th>gender</th>\n",
       "      <th>rating</th>\n",
       "      <th>prediction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>792</th>\n",
       "      <td>25</td>\n",
       "      <td>1199</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>793</th>\n",
       "      <td>25</td>\n",
       "      <td>899</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>794</th>\n",
       "      <td>25</td>\n",
       "      <td>699</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>795</th>\n",
       "      <td>25</td>\n",
       "      <td>435</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>796</th>\n",
       "      <td>25</td>\n",
       "      <td>649</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>40</td>\n",
       "      <td>1998</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>40</td>\n",
       "      <td>499</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>40</td>\n",
       "      <td>1199</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>29</td>\n",
       "      <td>199</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>891</th>\n",
       "      <td>29</td>\n",
       "      <td>379</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     age  price  gender  rating  prediction\n",
       "792   25   1199       0      10           7\n",
       "793   25    899       0      10           7\n",
       "794   25    699       0      10           7\n",
       "795   25    435       0      10           6\n",
       "796   25    649       0      10           7\n",
       "..   ...    ...     ...     ...         ...\n",
       "887   40   1998       1       8           8\n",
       "888   40    499       1       8           7\n",
       "889   40   1199       1       7           7\n",
       "890   29    199       1       8           6\n",
       "891   29    379       1       6           7\n",
       "\n",
       "[100 rows x 5 columns]"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_merge_df2_test[\"prediction\"] = df_prediction\n",
    "data_merge_df2_test.head(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "62eb9d0f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5.429292929292929"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_squared_error(data_merge_df2_test[\"rating\"], data_merge_df2_test[\"prediction\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "47a721a1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.8232323232323233"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_absolute_error(data_merge_df2_test[\"rating\"], data_merge_df2_test[\"prediction\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "a346238f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "plt.scatter(x=range(len(data_merge_df2_test)), y=data_merge_df2_test[\"rating\"], color = \"blue\")\n",
    "plt.scatter(x=range(len(data_merge_df2_test)), y=data_merge_df2_test[\"prediction\"], color = \"red\")\n",
    "plt.xlabel(\"Respuesta a la encuesta (conjunto de prueba)\") # Hay 10 respuestas por cada encuestado/a\n",
    "plt.ylabel(\"Rating\")\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.11"
  },
  "vscode": {
   "interpreter": {
    "hash": "c1dba6a99b80d4579ba2dab66b57e030f5d009639632fb7ce51acd273d6ce91d"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
